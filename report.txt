———————————————————————————————————
Public member function descriptions
———————————————————————————————————

A high-level description of each of your public member functions in each of your classes, and why you chose to define each member function in its host class; also explain why (or why not) you decided to make each function virtual or pure virtual.

===StudentWorld===
StudentWorld(std::string assetDir); 
	* constructor
	* creates base object GameWorld, initializes m_player to nullptr so if the player quits before the program ends, the destructor doesn’t try to delete an uninitialized pointer
	* constructors are not virtual

virtual ~StudentWorld();
	* destructor
	* deletes all Actors in the m_actors container, deletes m_player
	* destructors are virtual

virtual int init();
	* initializes m_aliensLeft, which counts how many aliens left the player has to kill
	* initializes m_nAliens, which counts amount of aliens in the m_player array
	* inserts 30 star objects into m_actors list passed with a random x
	* virtual because the base class GameWorld contains pure virtual version of this function

virtual int move();
	* Pseudocode:
		tells player to do something
		calls introduceAlien() to possibly add a new alien into the world
		iterates through all Actors in m_actors, 
			asks them to do something if they’re still alive, 
			removes them if they aren’t
		returns if player dies or player completes the level (kills enough aliens) 
		iterates through m_actors again and removes dead objects
		may introduce new star
		updates display text
		continues game
	* virtual because the base class GameWorld contains pure virtual version of this function

virtual void cleanUp();
	* deletes m_player and sets the pointer to nullptr in case the destructor is called
	* deletes all actors in m_actors
	* virtual because the base class GameWorld contains pure virtual version of this function

Actor* getOneCollidingAlien(const Actor* a) const;
	* part of StudentWorld as it iterates through private member m_actors
	* iterates through m_actors and calls euclideanDistance helper function to return an actor if a collides with the actor, returns nullptr if there is no collision
	* not virtual because no other class uses this function

NachenBlaster* getCollidingPlayer(const Actor* a) const;
	* calls euclideanDistance helper function to return an actor if a collides with the actor, returns nullptr if there is no collision
	* part of StudentWorld because it handles StudentWorld private member m_player
	* not virtual as there is no other implementation of this function

bool playerInLineOfFire(const Actor* a) const;
	* returns true if player’s y coordinate is [-4,4] from a’s y coordinate, and player’s x coordinate is less than a’s y coordinate

void addActor(Actor* a);
	* pushes a onto m_actors
	* included in StudentWorld because it directly interacts with StudentWorld’s member m_actors
	* not virtual because function only works with StudentWorld, not base class

void recordAlienDestroyed();
	* decrements m_aliensLeft, called when player kills an alien
	* interface member for StudentWorld
	* not virtual as there is no other implementation of this function

NachenBlaster* getPlayer();
	* returns m_player
	* not virtual, accessor function



===Actor===
Actor(StudentWorld* world, int imageID, double startX, double startY, int dir = 0, double size = 1.0, int depth = 0);
	* constructor, stares StudentWorld pointer and constructs GameObject base class with remaining parameters
	* constructors are not virtual

virtual ~Actor();
	* destructor
	* destructors are virtual

virtual void doSomething() = 0;
	* pure virtual because all derived classes will execute this function differently during move()

bool isAlive();
	* returns opposite of m_isDead
	* not virtual, accessor function

bool isAlien();
	* returns m_isAlien
	* not virtual, accessor function

virtual void takeDamage(double damage);
	* virtual function that does nothing so that derived classes may call takeDamage through an Actor pointer
	* not pure virtual because not all derived functions will have this function



===Ship===
Ship(StudentWorld* world, int imageID, double health, double startX, double startY, int dir, double size, int depth);
	* constructor creates Actor base, initializes m_health member variable
	* constructors are not virtual

virtual ~Ship();
	* destructor
	* destructors are virtual

double getHealth();
	* accessor for private m_health
	* not virtual, accessor function

virtual void getKilled() = 0;
	* pure virtual so that derived classes may die and play own animations, sounds, and modify data

virtual void takeDamage(double amount);
	* virtual differs from Actor’s implementation
	* subtract amount from health

void addHealth(double amount);
	* mutator function adds amount to health



===NachenBlaster===
NachenBlaster(StudentWorld* world);
	* constructs Nachenblaster object with correct x, y , depth, hp, cabbages, torpedoes, direction, depth, image ID, StudentWorld object
	* constructors are not virtual

virtual ~NachenBlaster();
	* destructor
	* destructors are virtual

virtual void doSomething();
	* pseudocode:
		returns if player is dead
		processes player input
			up/down/left/right: moves in that direction if movement won’t push player off screen
			space: summons cabbage, decreases m_cabbages by 5
			tab: summons torpedo, decreases m_torpedoes by 1
		increases m_cabbages by 1
		sets player to dead if health <= 0				

int getCabbages();
	* returns cabbage%
	* not virtual, accessor function

int getTorpedoes();
	* returns m_torpedoes
	* not virtual, accessor function

void repair();
	* adds 10 health points for up to 50 points

void incTorpedoes();
	* adds 5 torpedoes

virtual void getKilled();
	* sets status to dead, decreases lives left for game



===Alien===
Alien(StudentWorld* world, int imageID, double health, double startX, double startY, double speed, int direction);
	* constructor
	* constructors are not virtual

virtual ~Alien();
	* destructor
	* destructors are virtual

virtual void doSomething();
	* pseudocode
		returns if alien is dead
		sets alien to dead if it flies off the screen
		calls handleCollisions() to handle the collisions
		calls playerInLineOfFire(this), calls shoot() if player is ahead of the alien
		calls fly() to move in the appropriate direction
		handles collisions again

virtual void handleFlightPlan() = 0;
	* pure virtual, all aliens follow a flight plan

virtual void fly() = 0;
	* pure virtual, all aliens fly

int getFlightDirection();
	* accessor to m_flightDirection
	* not virtual, accessor function

virtual void shoot() = 0;
	* pure virtual, all aliens shoot

virtual void dropGoodie() = 0;
	* pure virtual, aliens drop goodies differently 

virtual void collideWithPlayer(NachenBlaster* player) = 0;
	* pure virtual, aliens damage player differently on collision

virtual void getKilled();
	* sets state to dead and decreases amount of lives
	* not pure virtual because all aliens die the same way



===PoorAlien===
PoorAlien(StudentWorld* world, int imageID, double health, double startX, double startY);
	* constructor
	* constructors are not virtual

virtual void handleFlightPlan();
	* changes flight plan direction if alien reaches the edge of the screen or if the current plan ends, with random flight plan length

virtual void fly();
	* moves travelSpeed in the direction of flight plan, decreases m_flightPlan by one

virtual void shoot();
	* calculates odds of alien shooting, and if the alien decides to shoot, summons a new Turnip object

virtual void collideWithPlayer(NachenBlaster* player);
	* tells player to take 5 pts of damage

virtual void incScore();
	* increases game score by 250 points



===Smallgon===
Smallgon(StudentWorld* world, double health, double startX, double startY);
	* constructor
	* constructors are not virtual

virtual ~Smallgon();
	* destructor
	* destructors are virtual

virtual void dropGoodie();
	* does nothing, smallgon doesn’t drop anything



===Smoregon===
Smoregon(StudentWorld* world, double health, double startX, double startY);
	* constructor
	* constructors are not virtual

virtual ~Smoregon();
	* destructor
	* destructors are virtual

virtual void dropGoodie();
	* 1 in 3 chance to drop a goodie, 50% chance summons new RepairGoodie, otherwise ExtraLifeGoodie



===Snagglegon===
Snagglegon(StudentWorld* world, double health, double startX, double startY);
	* constructor
	* constructors are not virtual

virtual ~Snagglegon();
	* destructor
	* destructors are virtual

virtual void handleFlightPlan();
	* if snagglegon is on the edge of the screen, changes flight plan direction to move in opposite direction

virtual void fly();
	* calls moveTo to move m_travelSpeed in m_flightDirection

virtual void shoot();
	* calculates odds of shooting, if Snagglegon decides to shoot, summons torpedo

virtual void dropGoodie();
	* 1 in 6 chance, summons FlatulenceTorpedoGoodie

virtual void collideWithPlayer(NachenBlaster* player);
	* tells player to take 15 points of damage

virtual void incScore();
	* increases game score by 1000



===Star===
Star(StudentWorld* world, double x = VIEW_WIDTH - 1); 
	* constructor
	* constructors are not virtual

virtual ~Star();
	* destructor
	* destructors are virtual

virtual void doSomething();
	* moves left one pixel, sets state to dead if it moves off the screen



===Projectile===
Projectile(StudentWorld* world, int imageID, double startX, double startY, int dir = 0);
	* constructor
	* constructors are not virtual

virtual void doSomething();
	* returns if dead, sets dead if it flies off the screen, calls handleCollisions(), calls fly(), calls handleCollisions() again

virtual void fly() = 0;
	* pure virtual, derived projectiles fly differently

virtual ~Projectile();
	* destructor
	* destructors are virtual

virtual void damage(Actor* target) = 0;
	* pure virtual, derived projectiles damage other actors differently

virtual bool handleCollisions() = 0;
	* pure virtual, derived projectiles handle collisions differently



===Cabbage===
Cabbage(StudentWorld* world, double startX, double startY);
	* constructor, plays shooting sound
	* constructors are not virtual

virtual ~Cabbage();
	* destructor
	* destructors are virtual

virtual void fly();
	* moves right 8 pixels, rotates 20 degrees

virtual bool handleCollisions();
	* calls handleAlienCollisions()

virtual void damage(Actor* target);
	* tells actor to take 2 pts of damage



===Turnip===
Turnip(StudentWorld* world, double startX, double startY);
	* constructor, plays shooting sound
	* constructors are not virtual

virtual ~Turnip();
	* destructor
	* destructors are virtual

virtual void fly();
	* moves 6 pixels left, rotates 20 degrees

virtual void damage(Actor* target);
	* tells actor to take 2 pts of damage

virtual bool handleCollisions();
	* calls handlePlayerCollisions();



===FlatulenceTorpedo===
FlatulenceTorpedo(StudentWorld* world, double startX, double startY, bool fromPlayer);
	* constructor, plays torpedo sound
	* constructors are not virtual

virtual ~FlatulenceTorpedo();
	* destructor
	* destructors are virtual

virtual void fly();
	* player torpedoes move 8 right, alien torpedoes move 8 left

virtual bool handleCollisions();
	* player torpedoes call handleAlienCollisions(), alien torpedoes call handlePlayerCollisions()

virtual void damage(Actor* target);
	* tells target to take 8 pts of damage



===Explosion===
Explosion(StudentWorld* world, double startX, double startY);
	* constructor, plays blast sound
	* constructors are not virtual

virtual ~Explosion();
	* destructor
	* destructors are virtual

virtual void doSomething();
	* increases size by 1.5, sets state to dead after 4 ticks



===Goodie===
Goodie(StudentWorld* world, int imageID, double startX, double startY);
	* constructor
	* constructors are not virtual

virtual ~Goodie();
	* destructor

virtual void doSomething();
	* returns if dead, calls handleCollisions(), moves down and left .75, calls handleCollisions() again

virtual void notifyPlayer(NachenBlaster* player) = 0;
	* pure virtual, derived goodies tell player to do different things



===RepairGoodie===
RepairGoodie(StudentWorld* world, double startX, double startY);
	* constructor
	* constructors are not virtual

virtual ~RepairGoodie();
	* destructor
	* destructors are virtual

virtual void notifyPlayer(NachenBlaster* player);
	* tells player to call the repair function



===ExtraLifeGoodie===
ExtraLifeGoodie(StudentWorld* world, double startX, double startY);
	* constructor
	* constructors are not virtual

virtual ~ExtraLifeGoodie();
	* destructor
	* destructors are virtual

virtual void notifyPlayer(NachenBlaster* player);
	* increases world’s number of lives by 1



===FlatulenceTorpedoGoodie===
FlatulenceTorpedoGoodie(StudentWorld* world, double startX, double startY);
	* constructor
	* constructors are not virtual

virtual ~FlatulenceTorpedoGoodie();
	* destructor
	* destructors are virtual

virtual void notifyPlayer(NachenBlaster* player);
	* tells player to increase torpedoes by 5



———————————————
Missed features
———————————————
None!

————————————————
Assumptions made
————————————————
Spec said that when an actor ran off the screen or took too much damage, to notify StudentWorld to destroy it, but instead, I made the actor’s boolean member variable go to its dead state and had StudentWorld destroy all dead objects during the move() routine

In every collision, one object ends up dead, while the other is affected. I had the killed one process the collisions. It would notify the other object to take damage, or in the case of goodies, increase the value of its member variables. The killed variable would then set its state to dead.

———————
Testing
———————
All tests conducted in-game.
===NachenBlaster===
I tested construction by observing the state of the ship at the start of each level. It was created in position (50, 128), was facing right, had 100% health, 100% cabbage, and 0 torpedoes.
To test the cabbage-shooting functionality, I shot cabbages by pressing the space bar. They appeared to the right of the NachenBlaster, played the shooting sound, and reduced the cabbage energy. The cabbage energy dipped but quickly regenerated.
To test the torpedo shooting, I temporarily modified code to construct NachenBlaster with a m_torpedoes of 10 (bc I’m not good enough at the game to get them on my own), then shot them by pressing tab. The torpedoes appeared to the right of the NachenBlaster, played the torpedo sound, and decreased m_torpedoes.
To test the movement, I had to comment out the code that spawned in new aliens so I could move around without distraction. I moved the NachenBlaster with the arrow keys, up to each screen border.
To test collisions, I let the NachenBlaster get hit by different objects. I moved in front of other aliens so that they would shoot.  I also rammed the NachenBlaster into other alien ships. They disappeared and played the blast sound. I spawned in goodies and moved to them.  They disappeared on collision and played the goodie sound.

===Smallgon===
Smallgons are created and placed randomly along the right edge of the screen. They then move randomly up-left, left and down-left. If the Smallgon reaches the top or bottom of the screen it changes direction to move back to the middle. If the Smallgon is directly to the left of the NachenBlaster, it may fire a turnip. If the smallgon collides with the player, it dies and deals 5 points of damage to the player. If the Smallgon dies, it rewards 250 points to the player.

===Smoregon===
Smoregons are created and placed randomly along the right edge of the screen. They then move randomly up-left, left and down-left. If the Smoregon reaches the top or bottom of the screen it changes direction to move back to the middle. If the Smoregon is directly to the left of the NachenBlaster, it may fire a turnip. If the smoregon collides with the player, it dies and deals 5 points of damage to the player, then may drop either a extra life goodie or repair goodie. If the Smoregon dies, it rewards 250 points to the player.

===Snagglegon===
Snagglegons are created and placed randomly along the right edge of the screen. They then move up-left, and down-left. If the Snagglegon reaches the top or bottom of the screen it changes direction to move back to the middle. If the Snagglegon is directly to the left of the Nachenblaster, it may fire a torpedo. If the snagglegon collides with the player, it dies and deals 15 points of damage to the player, then may drop a torpedo goodie. If the Snagglegon dies, it rewards 1000 points to the player.

===Star===
On opening the game, I checked the creation of the first 30 stars by putting a breakpoint at the end of init() in StudentWorld. The stars were randomly placed and correctly sized. When I continued the game, the stars would all move left at the same pace of 1 pixel per tick.

===Cabbage===
The cabbages launched by the NachenBlaster move right 8 pixels per tick and rotate counterclockwise. When the cabbage collides with another object, the cabbage disappears and damages the other object.

===Turnip===
The turnips launched by the Smallgons and Smoregons moved left at 6 pixels per tick and rotates counterclockwise. When the turnips collide with the player, they disappear immediately and inflict 2 pts of damage to the player, decreasing the health percentage by 4%.

===FlatulenceTorpedo===
Torpedoes launched by the player faced right, and moved 8 pixels to the right per tick. As it collides with an alien, the alien takes damage and the torpedo disappears. Torpedoes launched by Snagglegons faced left and moved 8 pixels left per second. As it collides with the player, the player takes 8 points of damage, decreasing the health percentage by 16%. 

===Explosion===
I killed aliens by colliding with them and shooting them. The resulting explosions placed on the aliens’ locations played the death sound, expanded by a factor of 1.5 each tick and disappeared after 4 ticks.

====RepairGoodie===
The repair goodie is created at the location of the killed smoregon, then migrates down and left. When it collides with the player, it plays the goodie sound, disappears, increases the player’s score by 100 points and gives the player 10 health points up to 50 total.

===ExtraLifeGoodie===
The extra life goodie is created at the location of the killed smoregon, then migrates down and left. When it collides with the player, it plays the goodie sound, disappears, increases the player’s score by 100 points and gives the player 1 extra life.

===FlatulenceTorpedoGoodie===
The flatulence torpedo goodie is created at the location of the killed snagglegon, then migrates down and left. When it collides with the player, it plays the goodie sound, disappears, increases the player’s score by 100 points and gives the player 5 torpedoes.
